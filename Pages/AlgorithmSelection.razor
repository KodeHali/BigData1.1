@page "/algorithm-selection"
@using NewBlazorApp.Services
@using NewBlazorApp.Algorithms
@inject IJSRuntime JSRuntime

@inject DataService DataService
@inject NavigationManager NavigationManager

<h3>Select Clustering Algorithm and Dimensions</h3>

<!-- Dropdowns for selecting dimensions -->
<div>
    <label for="xDimension">X Dimension:</label>
    <select id="xDimension" @bind="selectedXDimension">
        @foreach (var column in DataService.CsvData.Headers)
        {
            <option value="@column">@column</option>
        }
    </select>
</div>
<div>
    <label for="yDimension">Y Dimension:</label>
    <select id="yDimension" @bind="selectedYDimension">
        @foreach (var column in DataService.CsvData.Headers)
        {
            <option value="@column">@column</option>
        }
    </select>
</div>

<!-- Algorithm Selection -->
<div>
    <label for="algorithm">Choose an algorithm:</label>
    <select id="algorithm" @bind="SelectedAlgorithm">
        <option value="kmeans">K-Means Clustering</option>
        <!-- Add other algorithms here -->
    </select>
</div>

<!-- Run Clustering Button -->
<button class="btn btn-primary" @onclick="RunClustering">Run Clustering</button>

<!-- Chart container -->
<canvas id="clusterChart" width="600" height="400"></canvas>

@code {
    private string selectedXDimension = "";
    private string selectedYDimension = "";
    private string SelectedAlgorithm { get; set; } = "kmeans"; // Default algorithm

    private List<ClusteredRow> ClusteredData { get; set; }

    public class ClusteredRow
    {
        public double X { get; set; }
        public double Y { get; set; }
        public int Cluster { get; set; }
    }

    private async Task RunClustering()
{
    try
    {
        Console.WriteLine("Starting clustering...");

        // Dictionary for storing label encodings for categorical columns
        var encodingDictionaries = new Dictionary<int, Dictionary<string, double>>();

        // Prepare dataset (loop through every row and convert non-numeric columns)
        var dataset = DataService.CsvData.Rows
            .Select(row =>
            {
                var encodedRow = new List<double>();

                for (int i = 0; i < row.Count; i++)
                {
                    double numericValue;

                    // Try to parse the value as a number
                    if (double.TryParse(row[i], out numericValue))
                    {
                        encodedRow.Add(numericValue); // Numeric value
                    }
                    else
                    {
                        // It's a categorical (string) value, so we label encode it
                        if (!encodingDictionaries.ContainsKey(i))
                        {
                            // Create a new dictionary for this column if not already created
                            encodingDictionaries[i] = new Dictionary<string, double>();
                        }

                        // Check if the value already has a label, if not, assign a new one
                        if (!encodingDictionaries[i].ContainsKey(row[i]))
                        {
                            // Assign a new numeric value for this category
                            encodingDictionaries[i][row[i]] = encodingDictionaries[i].Count;
                        }

                        // Use the encoded value for this categorical value
                        encodedRow.Add(encodingDictionaries[i][row[i]]);
                    }
                }

                return encodedRow.ToArray(); // Convert the list to an array of doubles
            })
            .ToList();

        Console.WriteLine("Dataset prepared for clustering...");

        // Check if dataset is empty
        if (dataset.Count == 0)
        {
            throw new Exception("No valid data available for clustering");
        }

        // Run KMeans (or other selected algorithm)
        var kmeans = new KMeans();
        var clusters = kmeans.Cluster(dataset, 3); // Assuming k=3 for example

        Console.WriteLine("Clustering completed...");

        // Prepare the ClusteredData for visualization (just using the first two dimensions for the scatter plot)
        ClusteredData = dataset.Select((data, index) => new ClusteredRow
        {
            X = data[0], // First dimension (X axis)
            Y = data[1], // Second dimension (Y axis)
            Cluster = clusters[index] // Cluster assignment
        }).ToList();

        Console.WriteLine("ClusteredData populated...");

        // Create scatter plot data points in {x, y} format for Chart.js
        var dataPoints = ClusteredData.Select(row => new
        {
            x = row.X,
            y = row.Y
        }).ToArray();

        Console.WriteLine("Calling JavaScript function to create scatter plot...");

        // Call the JavaScript function to render the chart
        await JSRuntime.InvokeVoidAsync("createScatterChart", "clusterChart", dataPoints, selectedXDimension, selectedYDimension);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in clustering: {ex.Message}");
    }
}

}

