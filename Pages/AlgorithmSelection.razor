@page "/algorithm-selection"
@using NewBlazorApp.Services
@using NewBlazorApp.Algorithms
@inject DataService DataService
@inject NavigationManager NavigationManager

<h3>Select Clustering Algorithm and Options</h3>

<!-- PCA Toggle -->
<div>
    <input type="checkbox" @bind="ApplyPca" /> Apply PCA before clustering
</div>

<!-- Algorithm Selection -->
<div>
    <label for="algorithm">Choose an algorithm:</label>
    <select id="algorithm" @bind="SelectedAlgorithm">
        <option value="kmeans">K-Means Clustering</option>
        <option value="meanshift">Mean Shift Clustering</option>
        <option value="birch">BIRCH Clustering</option>
        <option value="ward">Ward Clustering</option>
        <option value="dbscan">DBSCAN Clustering</option>
    </select>
</div>

<!-- Run Clustering Button -->
<button class="btn btn-primary" @onclick="RunClustering">Run Clustering</button>

<p>@ClusteringStatus</p>

@if (ClusteredData != null)
{
    <h4>Cluster Results</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                @foreach (var header in DataService.CsvData.Headers)
                {
                    <th>@header</th>
                }
                <th>Cluster</th> <!-- To show the cluster ID -->
            </tr>
        </thead>
        <tbody>
            @foreach (var row in ClusteredData)
            {
                <tr>
                    @foreach (var cell in row.Data)
                    {
                        <td>@cell</td>
                    }
                    <td>@row.Cluster</td> <!-- Show the cluster assignment -->
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool ApplyPca { get; set; } = false;
    private string SelectedAlgorithm { get; set; } = "kmeans"; // Default algorithm
    private string ClusteringStatus { get; set; } = "";
    private List<ClusteredRow>? ClusteredData { get; set; }

    // Clustered row with data and cluster ID
    public class ClusteredRow
    {
        public List<string> Data { get; set; } = new List<string>();
        public int Cluster { get; set; }
    }

    // Function to run clustering based on the selected algorithm and PCA toggle
    private void RunClustering()
    {
        ClusteringStatus = $"Running {SelectedAlgorithm} algorithm...";

        var dataset = DataService.CsvData.Rows.Select(row => row.Select(double.Parse).ToArray()).ToList();

        if (ApplyPca)
        {
            dataset = ApplyPcaToData(dataset); // Apply PCA if checkbox is selected
            ClusteringStatus += " PCA applied before clustering.";
        }

        // Run selected clustering algorithm (add your actual algorithm logic here)
        ClusteredData = SelectedAlgorithm switch
        {
            "kmeans" => new KMeans().Cluster(dataset, 3).Select((cluster, index) => new ClusteredRow { Data = dataset[index].Select(d => d.ToString()).ToList(), Cluster = cluster }).ToList(),
            "meanshift" => new MeanShift().Cluster(dataset).Select((cluster, index) => new ClusteredRow { Data = dataset[index].Select(d => d.ToString()).ToList(), Cluster = cluster }).ToList(),
            "birch" => new Birch().Cluster(dataset).Select((cluster, index) => new ClusteredRow { Data = dataset[index].Select(d => d.ToString()).ToList(), Cluster = cluster }).ToList(),
            "ward" => new Ward().Cluster(dataset).Select((cluster, index) => new ClusteredRow { Data = dataset[index].Select(d => d.ToString()).ToList(), Cluster = cluster }).ToList(),
            "dbscan" => new Dbscan().Cluster(dataset, 0.5, 5).Select((cluster, index) => new ClusteredRow { Data = dataset[index].Select(d => d.ToString()).ToList(), Cluster = cluster }).ToList(),
            _ => new List<ClusteredRow>()
        };

        ClusteringStatus = $"Clustering completed using {SelectedAlgorithm}.";
    }

    // PCA algorithm placeholder (replace with actual PCA logic)
    private List<double[]> ApplyPcaToData(List<double[]> data)
    {
        // Apply PCA here and return reduced data
        return data.Select(row => row.Take(2).ToArray()).ToList(); // Example: Reduce to 2 dimensions
    }
}
